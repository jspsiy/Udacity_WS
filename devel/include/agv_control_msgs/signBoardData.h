// Generated by gencpp from file agv_control_msgs/signBoardData.msg
// DO NOT EDIT!


#ifndef AGV_CONTROL_MSGS_MESSAGE_SIGNBOARDDATA_H
#define AGV_CONTROL_MSGS_MESSAGE_SIGNBOARDDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace agv_control_msgs
{
template <class ContainerAllocator>
struct signBoardData_
{
  typedef signBoardData_<ContainerAllocator> Type;

  signBoardData_()
    : vehicle_name()
    , priority(0)
    , curr_sector()
    , allocated_sectors()
    , goal_sector()
    , goal_sec_state()
    , goal_pz()
    , goal_pz_state()
    , pz_control(false)
    , allocated_node()
    , required_segments()
    , allocated_segments()
    , curr_pz_seq(0)
    , moving(false)
    , removing(false)
    , docking(false)
    , parking(false)
    , planning(false)
    , passing(false)
    , inFailure(false)
    , idle(false)  {
    }
  signBoardData_(const ContainerAllocator& _alloc)
    : vehicle_name(_alloc)
    , priority(0)
    , curr_sector(_alloc)
    , allocated_sectors(_alloc)
    , goal_sector(_alloc)
    , goal_sec_state(_alloc)
    , goal_pz(_alloc)
    , goal_pz_state(_alloc)
    , pz_control(false)
    , allocated_node(_alloc)
    , required_segments(_alloc)
    , allocated_segments(_alloc)
    , curr_pz_seq(0)
    , moving(false)
    , removing(false)
    , docking(false)
    , parking(false)
    , planning(false)
    , passing(false)
    , inFailure(false)
    , idle(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicle_name_type;
  _vehicle_name_type vehicle_name;

   typedef int32_t _priority_type;
  _priority_type priority;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _curr_sector_type;
  _curr_sector_type curr_sector;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _allocated_sectors_type;
  _allocated_sectors_type allocated_sectors;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_sector_type;
  _goal_sector_type goal_sector;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_sec_state_type;
  _goal_sec_state_type goal_sec_state;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_pz_type;
  _goal_pz_type goal_pz;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_pz_state_type;
  _goal_pz_state_type goal_pz_state;

   typedef uint8_t _pz_control_type;
  _pz_control_type pz_control;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _allocated_node_type;
  _allocated_node_type allocated_node;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _required_segments_type;
  _required_segments_type required_segments;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _allocated_segments_type;
  _allocated_segments_type allocated_segments;

   typedef uint32_t _curr_pz_seq_type;
  _curr_pz_seq_type curr_pz_seq;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint8_t _removing_type;
  _removing_type removing;

   typedef uint8_t _docking_type;
  _docking_type docking;

   typedef uint8_t _parking_type;
  _parking_type parking;

   typedef uint8_t _planning_type;
  _planning_type planning;

   typedef uint8_t _passing_type;
  _passing_type passing;

   typedef uint8_t _inFailure_type;
  _inFailure_type inFailure;

   typedef uint8_t _idle_type;
  _idle_type idle;





  typedef boost::shared_ptr< ::agv_control_msgs::signBoardData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_control_msgs::signBoardData_<ContainerAllocator> const> ConstPtr;

}; // struct signBoardData_

typedef ::agv_control_msgs::signBoardData_<std::allocator<void> > signBoardData;

typedef boost::shared_ptr< ::agv_control_msgs::signBoardData > signBoardDataPtr;
typedef boost::shared_ptr< ::agv_control_msgs::signBoardData const> signBoardDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_control_msgs::signBoardData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_control_msgs::signBoardData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_control_msgs::signBoardData_<ContainerAllocator1> & lhs, const ::agv_control_msgs::signBoardData_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_name == rhs.vehicle_name &&
    lhs.priority == rhs.priority &&
    lhs.curr_sector == rhs.curr_sector &&
    lhs.allocated_sectors == rhs.allocated_sectors &&
    lhs.goal_sector == rhs.goal_sector &&
    lhs.goal_sec_state == rhs.goal_sec_state &&
    lhs.goal_pz == rhs.goal_pz &&
    lhs.goal_pz_state == rhs.goal_pz_state &&
    lhs.pz_control == rhs.pz_control &&
    lhs.allocated_node == rhs.allocated_node &&
    lhs.required_segments == rhs.required_segments &&
    lhs.allocated_segments == rhs.allocated_segments &&
    lhs.curr_pz_seq == rhs.curr_pz_seq &&
    lhs.moving == rhs.moving &&
    lhs.removing == rhs.removing &&
    lhs.docking == rhs.docking &&
    lhs.parking == rhs.parking &&
    lhs.planning == rhs.planning &&
    lhs.passing == rhs.passing &&
    lhs.inFailure == rhs.inFailure &&
    lhs.idle == rhs.idle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_control_msgs::signBoardData_<ContainerAllocator1> & lhs, const ::agv_control_msgs::signBoardData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::signBoardData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::signBoardData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::signBoardData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c16a3cd6d0fc51cf9c04c727333b0e8c";
  }

  static const char* value(const ::agv_control_msgs::signBoardData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc16a3cd6d0fc51cfULL;
  static const uint64_t static_value2 = 0x9c04c727333b0e8cULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_control_msgs/signBoardData";
  }

  static const char* value(const ::agv_control_msgs::signBoardData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string vehicle_name\n"
"int32 priority\n"
"\n"
"string curr_sector\n"
"string[] allocated_sectors\n"
"\n"
"string goal_sector\n"
"string goal_sec_state\n"
"\n"
"geometry_msgs/PoseStamped goal_pz\n"
"string goal_pz_state\n"
"bool pz_control\n"
"\n"
"geometry_msgs/PoseStamped allocated_node\n"
"\n"
"uint32[] required_segments\n"
"uint32[] allocated_segments\n"
"\n"
"uint32 curr_pz_seq\n"
"\n"
"bool moving\n"
"bool removing\n"
"bool docking\n"
"bool parking\n"
"bool planning\n"
"bool passing\n"
"bool inFailure\n"
"bool idle\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::agv_control_msgs::signBoardData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_name);
      stream.next(m.priority);
      stream.next(m.curr_sector);
      stream.next(m.allocated_sectors);
      stream.next(m.goal_sector);
      stream.next(m.goal_sec_state);
      stream.next(m.goal_pz);
      stream.next(m.goal_pz_state);
      stream.next(m.pz_control);
      stream.next(m.allocated_node);
      stream.next(m.required_segments);
      stream.next(m.allocated_segments);
      stream.next(m.curr_pz_seq);
      stream.next(m.moving);
      stream.next(m.removing);
      stream.next(m.docking);
      stream.next(m.parking);
      stream.next(m.planning);
      stream.next(m.passing);
      stream.next(m.inFailure);
      stream.next(m.idle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct signBoardData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_control_msgs::signBoardData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_control_msgs::signBoardData_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicle_name);
    s << indent << "priority: ";
    Printer<int32_t>::stream(s, indent + "  ", v.priority);
    s << indent << "curr_sector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.curr_sector);
    s << indent << "allocated_sectors[]" << std::endl;
    for (size_t i = 0; i < v.allocated_sectors.size(); ++i)
    {
      s << indent << "  allocated_sectors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.allocated_sectors[i]);
    }
    s << indent << "goal_sector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_sector);
    s << indent << "goal_sec_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_sec_state);
    s << indent << "goal_pz: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pz);
    s << indent << "goal_pz_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_pz_state);
    s << indent << "pz_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pz_control);
    s << indent << "allocated_node: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.allocated_node);
    s << indent << "required_segments[]" << std::endl;
    for (size_t i = 0; i < v.required_segments.size(); ++i)
    {
      s << indent << "  required_segments[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.required_segments[i]);
    }
    s << indent << "allocated_segments[]" << std::endl;
    for (size_t i = 0; i < v.allocated_segments.size(); ++i)
    {
      s << indent << "  allocated_segments[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.allocated_segments[i]);
    }
    s << indent << "curr_pz_seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.curr_pz_seq);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "removing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.removing);
    s << indent << "docking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docking);
    s << indent << "parking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking);
    s << indent << "planning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.planning);
    s << indent << "passing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.passing);
    s << indent << "inFailure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inFailure);
    s << indent << "idle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.idle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_CONTROL_MSGS_MESSAGE_SIGNBOARDDATA_H
