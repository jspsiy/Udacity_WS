// Generated by gencpp from file agv_control_msgs/GetMyPlanRequest.msg
// DO NOT EDIT!


#ifndef AGV_CONTROL_MSGS_MESSAGE_GETMYPLANREQUEST_H
#define AGV_CONTROL_MSGS_MESSAGE_GETMYPLANREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <agv_control_msgs/gridData.h>
#include <geometry_msgs/PoseStamped.h>

namespace agv_control_msgs
{
template <class ContainerAllocator>
struct GetMyPlanRequest_
{
  typedef GetMyPlanRequest_<ContainerAllocator> Type;

  GetMyPlanRequest_()
    : start()
    , goal()
    , removing(false)
    , carobst()
    , forbiddenCells()
    , vehWithFailures()
    , wrongX()
    , wrongY()  {
    }
  GetMyPlanRequest_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , goal(_alloc)
    , removing(false)
    , carobst(_alloc)
    , forbiddenCells(_alloc)
    , vehWithFailures(_alloc)
    , wrongX(_alloc)
    , wrongY(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef uint8_t _removing_type;
  _removing_type removing;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _carobst_type;
  _carobst_type carobst;

   typedef  ::agv_control_msgs::gridData_<ContainerAllocator>  _forbiddenCells_type;
  _forbiddenCells_type forbiddenCells;

   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _vehWithFailures_type;
  _vehWithFailures_type vehWithFailures;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wrongX_type;
  _wrongX_type wrongX;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wrongY_type;
  _wrongY_type wrongY;





  typedef boost::shared_ptr< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetMyPlanRequest_

typedef ::agv_control_msgs::GetMyPlanRequest_<std::allocator<void> > GetMyPlanRequest;

typedef boost::shared_ptr< ::agv_control_msgs::GetMyPlanRequest > GetMyPlanRequestPtr;
typedef boost::shared_ptr< ::agv_control_msgs::GetMyPlanRequest const> GetMyPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator1> & lhs, const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.removing == rhs.removing &&
    lhs.carobst == rhs.carobst &&
    lhs.forbiddenCells == rhs.forbiddenCells &&
    lhs.vehWithFailures == rhs.vehWithFailures &&
    lhs.wrongX == rhs.wrongX &&
    lhs.wrongY == rhs.wrongY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator1> & lhs, const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f307e49f4e9837bf699b86b85fdd6c2f";
  }

  static const char* value(const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf307e49f4e9837bfULL;
  static const uint64_t static_value2 = 0x699b86b85fdd6c2fULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_control_msgs/GetMyPlanRequest";
  }

  static const char* value(const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"geometry_msgs/PoseStamped start\n"
"\n"
"\n"
"geometry_msgs/PoseStamped goal\n"
"\n"
"bool removing\n"
"\n"
"\n"
"geometry_msgs/PoseStamped carobst\n"
"\n"
"\n"
"gridData forbiddenCells\n"
"\n"
"geometry_msgs/PoseStamped[] vehWithFailures\n"
"\n"
"int32[] wrongX\n"
"int32[] wrongY\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: agv_control_msgs/gridData\n"
"arrayData[] xGrid\n"
"arrayData[] yGrid\n"
"arrayData[] timeInGrid\n"
"arrayData[] timeOutGrid\n"
"\n"
"================================================================================\n"
"MSG: agv_control_msgs/arrayData\n"
"float32[] data\n"
;
  }

  static const char* value(const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.removing);
      stream.next(m.carobst);
      stream.next(m.forbiddenCells);
      stream.next(m.vehWithFailures);
      stream.next(m.wrongX);
      stream.next(m.wrongY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMyPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_control_msgs::GetMyPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "removing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.removing);
    s << indent << "carobst: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.carobst);
    s << indent << "forbiddenCells: ";
    s << std::endl;
    Printer< ::agv_control_msgs::gridData_<ContainerAllocator> >::stream(s, indent + "  ", v.forbiddenCells);
    s << indent << "vehWithFailures[]" << std::endl;
    for (size_t i = 0; i < v.vehWithFailures.size(); ++i)
    {
      s << indent << "  vehWithFailures[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.vehWithFailures[i]);
    }
    s << indent << "wrongX[]" << std::endl;
    for (size_t i = 0; i < v.wrongX.size(); ++i)
    {
      s << indent << "  wrongX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wrongX[i]);
    }
    s << indent << "wrongY[]" << std::endl;
    for (size_t i = 0; i < v.wrongY.size(); ++i)
    {
      s << indent << "  wrongY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wrongY[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_CONTROL_MSGS_MESSAGE_GETMYPLANREQUEST_H
