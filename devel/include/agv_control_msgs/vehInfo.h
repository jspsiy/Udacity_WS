// Generated by gencpp from file agv_control_msgs/vehInfo.msg
// DO NOT EDIT!


#ifndef AGV_CONTROL_MSGS_MESSAGE_VEHINFO_H
#define AGV_CONTROL_MSGS_MESSAGE_VEHINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <agv_control_msgs/gridData.h>

namespace agv_control_msgs
{
template <class ContainerAllocator>
struct vehInfo_
{
  typedef vehInfo_<ContainerAllocator> Type;

  vehInfo_()
    : header()
    , vehicleName()
    , grid()
    , WrongRobots()
    , xStop()
    , yStop()
    , currPathSeq(0)
    , currPathSeg(0)  {
    }
  vehInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicleName(_alloc)
    , grid(_alloc)
    , WrongRobots(_alloc)
    , xStop(_alloc)
    , yStop(_alloc)
    , currPathSeq(0)
    , currPathSeg(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicleName_type;
  _vehicleName_type vehicleName;

   typedef  ::agv_control_msgs::gridData_<ContainerAllocator>  _grid_type;
  _grid_type grid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _WrongRobots_type;
  _WrongRobots_type WrongRobots;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _xStop_type;
  _xStop_type xStop;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _yStop_type;
  _yStop_type yStop;

   typedef uint32_t _currPathSeq_type;
  _currPathSeq_type currPathSeq;

   typedef uint32_t _currPathSeg_type;
  _currPathSeg_type currPathSeg;





  typedef boost::shared_ptr< ::agv_control_msgs::vehInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_control_msgs::vehInfo_<ContainerAllocator> const> ConstPtr;

}; // struct vehInfo_

typedef ::agv_control_msgs::vehInfo_<std::allocator<void> > vehInfo;

typedef boost::shared_ptr< ::agv_control_msgs::vehInfo > vehInfoPtr;
typedef boost::shared_ptr< ::agv_control_msgs::vehInfo const> vehInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_control_msgs::vehInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_control_msgs::vehInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_control_msgs::vehInfo_<ContainerAllocator1> & lhs, const ::agv_control_msgs::vehInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicleName == rhs.vehicleName &&
    lhs.grid == rhs.grid &&
    lhs.WrongRobots == rhs.WrongRobots &&
    lhs.xStop == rhs.xStop &&
    lhs.yStop == rhs.yStop &&
    lhs.currPathSeq == rhs.currPathSeq &&
    lhs.currPathSeg == rhs.currPathSeg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_control_msgs::vehInfo_<ContainerAllocator1> & lhs, const ::agv_control_msgs::vehInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::vehInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::vehInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::vehInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6e9ae8dd848817a5cdb6e0944422574";
  }

  static const char* value(const ::agv_control_msgs::vehInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6e9ae8dd848817aULL;
  static const uint64_t static_value2 = 0x5cdb6e0944422574ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_control_msgs/vehInfo";
  }

  static const char* value(const ::agv_control_msgs::vehInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string vehicleName\n"
"\n"
"gridData grid\n"
"\n"
"string[] WrongRobots\n"
"\n"
"int32[] xStop\n"
"int32[] yStop\n"
"\n"
"uint32 currPathSeq\n"
"uint32 currPathSeg\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agv_control_msgs/gridData\n"
"arrayData[] xGrid\n"
"arrayData[] yGrid\n"
"arrayData[] timeInGrid\n"
"arrayData[] timeOutGrid\n"
"\n"
"================================================================================\n"
"MSG: agv_control_msgs/arrayData\n"
"float32[] data\n"
;
  }

  static const char* value(const ::agv_control_msgs::vehInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicleName);
      stream.next(m.grid);
      stream.next(m.WrongRobots);
      stream.next(m.xStop);
      stream.next(m.yStop);
      stream.next(m.currPathSeq);
      stream.next(m.currPathSeg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_control_msgs::vehInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_control_msgs::vehInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicleName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicleName);
    s << indent << "grid: ";
    s << std::endl;
    Printer< ::agv_control_msgs::gridData_<ContainerAllocator> >::stream(s, indent + "  ", v.grid);
    s << indent << "WrongRobots[]" << std::endl;
    for (size_t i = 0; i < v.WrongRobots.size(); ++i)
    {
      s << indent << "  WrongRobots[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.WrongRobots[i]);
    }
    s << indent << "xStop[]" << std::endl;
    for (size_t i = 0; i < v.xStop.size(); ++i)
    {
      s << indent << "  xStop[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.xStop[i]);
    }
    s << indent << "yStop[]" << std::endl;
    for (size_t i = 0; i < v.yStop.size(); ++i)
    {
      s << indent << "  yStop[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.yStop[i]);
    }
    s << indent << "currPathSeq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.currPathSeq);
    s << indent << "currPathSeg: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.currPathSeg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_CONTROL_MSGS_MESSAGE_VEHINFO_H
