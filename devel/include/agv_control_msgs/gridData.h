// Generated by gencpp from file agv_control_msgs/gridData.msg
// DO NOT EDIT!


#ifndef AGV_CONTROL_MSGS_MESSAGE_GRIDDATA_H
#define AGV_CONTROL_MSGS_MESSAGE_GRIDDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <agv_control_msgs/arrayData.h>
#include <agv_control_msgs/arrayData.h>
#include <agv_control_msgs/arrayData.h>
#include <agv_control_msgs/arrayData.h>

namespace agv_control_msgs
{
template <class ContainerAllocator>
struct gridData_
{
  typedef gridData_<ContainerAllocator> Type;

  gridData_()
    : xGrid()
    , yGrid()
    , timeInGrid()
    , timeOutGrid()  {
    }
  gridData_(const ContainerAllocator& _alloc)
    : xGrid(_alloc)
    , yGrid(_alloc)
    , timeInGrid(_alloc)
    , timeOutGrid(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::agv_control_msgs::arrayData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::agv_control_msgs::arrayData_<ContainerAllocator> >::other >  _xGrid_type;
  _xGrid_type xGrid;

   typedef std::vector< ::agv_control_msgs::arrayData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::agv_control_msgs::arrayData_<ContainerAllocator> >::other >  _yGrid_type;
  _yGrid_type yGrid;

   typedef std::vector< ::agv_control_msgs::arrayData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::agv_control_msgs::arrayData_<ContainerAllocator> >::other >  _timeInGrid_type;
  _timeInGrid_type timeInGrid;

   typedef std::vector< ::agv_control_msgs::arrayData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::agv_control_msgs::arrayData_<ContainerAllocator> >::other >  _timeOutGrid_type;
  _timeOutGrid_type timeOutGrid;





  typedef boost::shared_ptr< ::agv_control_msgs::gridData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_control_msgs::gridData_<ContainerAllocator> const> ConstPtr;

}; // struct gridData_

typedef ::agv_control_msgs::gridData_<std::allocator<void> > gridData;

typedef boost::shared_ptr< ::agv_control_msgs::gridData > gridDataPtr;
typedef boost::shared_ptr< ::agv_control_msgs::gridData const> gridDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_control_msgs::gridData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_control_msgs::gridData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_control_msgs::gridData_<ContainerAllocator1> & lhs, const ::agv_control_msgs::gridData_<ContainerAllocator2> & rhs)
{
  return lhs.xGrid == rhs.xGrid &&
    lhs.yGrid == rhs.yGrid &&
    lhs.timeInGrid == rhs.timeInGrid &&
    lhs.timeOutGrid == rhs.timeOutGrid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_control_msgs::gridData_<ContainerAllocator1> & lhs, const ::agv_control_msgs::gridData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::gridData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_control_msgs::gridData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::gridData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_control_msgs::gridData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::gridData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_control_msgs::gridData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_control_msgs::gridData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75f2fe2eb528ad0443af47611bcbf66b";
  }

  static const char* value(const ::agv_control_msgs::gridData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75f2fe2eb528ad04ULL;
  static const uint64_t static_value2 = 0x43af47611bcbf66bULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_control_msgs::gridData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_control_msgs/gridData";
  }

  static const char* value(const ::agv_control_msgs::gridData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_control_msgs::gridData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arrayData[] xGrid\n"
"arrayData[] yGrid\n"
"arrayData[] timeInGrid\n"
"arrayData[] timeOutGrid\n"
"\n"
"================================================================================\n"
"MSG: agv_control_msgs/arrayData\n"
"float32[] data\n"
;
  }

  static const char* value(const ::agv_control_msgs::gridData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_control_msgs::gridData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xGrid);
      stream.next(m.yGrid);
      stream.next(m.timeInGrid);
      stream.next(m.timeOutGrid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gridData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_control_msgs::gridData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_control_msgs::gridData_<ContainerAllocator>& v)
  {
    s << indent << "xGrid[]" << std::endl;
    for (size_t i = 0; i < v.xGrid.size(); ++i)
    {
      s << indent << "  xGrid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_control_msgs::arrayData_<ContainerAllocator> >::stream(s, indent + "    ", v.xGrid[i]);
    }
    s << indent << "yGrid[]" << std::endl;
    for (size_t i = 0; i < v.yGrid.size(); ++i)
    {
      s << indent << "  yGrid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_control_msgs::arrayData_<ContainerAllocator> >::stream(s, indent + "    ", v.yGrid[i]);
    }
    s << indent << "timeInGrid[]" << std::endl;
    for (size_t i = 0; i < v.timeInGrid.size(); ++i)
    {
      s << indent << "  timeInGrid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_control_msgs::arrayData_<ContainerAllocator> >::stream(s, indent + "    ", v.timeInGrid[i]);
    }
    s << indent << "timeOutGrid[]" << std::endl;
    for (size_t i = 0; i < v.timeOutGrid.size(); ++i)
    {
      s << indent << "  timeOutGrid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::agv_control_msgs::arrayData_<ContainerAllocator> >::stream(s, indent + "    ", v.timeOutGrid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_CONTROL_MSGS_MESSAGE_GRIDDATA_H
