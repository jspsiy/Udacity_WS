# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_control_msgs/signBoardData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class signBoardData(genpy.Message):
  _md5sum = "c16a3cd6d0fc51cf9c04c727333b0e8c"
  _type = "agv_control_msgs/signBoardData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string vehicle_name
int32 priority

string curr_sector
string[] allocated_sectors

string goal_sector
string goal_sec_state

geometry_msgs/PoseStamped goal_pz
string goal_pz_state
bool pz_control

geometry_msgs/PoseStamped allocated_node

uint32[] required_segments
uint32[] allocated_segments

uint32 curr_pz_seq

bool moving
bool removing
bool docking
bool parking
bool planning
bool passing
bool inFailure
bool idle

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['vehicle_name','priority','curr_sector','allocated_sectors','goal_sector','goal_sec_state','goal_pz','goal_pz_state','pz_control','allocated_node','required_segments','allocated_segments','curr_pz_seq','moving','removing','docking','parking','planning','passing','inFailure','idle']
  _slot_types = ['string','int32','string','string[]','string','string','geometry_msgs/PoseStamped','string','bool','geometry_msgs/PoseStamped','uint32[]','uint32[]','uint32','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_name,priority,curr_sector,allocated_sectors,goal_sector,goal_sec_state,goal_pz,goal_pz_state,pz_control,allocated_node,required_segments,allocated_segments,curr_pz_seq,moving,removing,docking,parking,planning,passing,inFailure,idle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(signBoardData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vehicle_name is None:
        self.vehicle_name = ''
      if self.priority is None:
        self.priority = 0
      if self.curr_sector is None:
        self.curr_sector = ''
      if self.allocated_sectors is None:
        self.allocated_sectors = []
      if self.goal_sector is None:
        self.goal_sector = ''
      if self.goal_sec_state is None:
        self.goal_sec_state = ''
      if self.goal_pz is None:
        self.goal_pz = geometry_msgs.msg.PoseStamped()
      if self.goal_pz_state is None:
        self.goal_pz_state = ''
      if self.pz_control is None:
        self.pz_control = False
      if self.allocated_node is None:
        self.allocated_node = geometry_msgs.msg.PoseStamped()
      if self.required_segments is None:
        self.required_segments = []
      if self.allocated_segments is None:
        self.allocated_segments = []
      if self.curr_pz_seq is None:
        self.curr_pz_seq = 0
      if self.moving is None:
        self.moving = False
      if self.removing is None:
        self.removing = False
      if self.docking is None:
        self.docking = False
      if self.parking is None:
        self.parking = False
      if self.planning is None:
        self.planning = False
      if self.passing is None:
        self.passing = False
      if self.inFailure is None:
        self.inFailure = False
      if self.idle is None:
        self.idle = False
    else:
      self.vehicle_name = ''
      self.priority = 0
      self.curr_sector = ''
      self.allocated_sectors = []
      self.goal_sector = ''
      self.goal_sec_state = ''
      self.goal_pz = geometry_msgs.msg.PoseStamped()
      self.goal_pz_state = ''
      self.pz_control = False
      self.allocated_node = geometry_msgs.msg.PoseStamped()
      self.required_segments = []
      self.allocated_segments = []
      self.curr_pz_seq = 0
      self.moving = False
      self.removing = False
      self.docking = False
      self.parking = False
      self.planning = False
      self.passing = False
      self.inFailure = False
      self.idle = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.vehicle_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.priority))
      _x = self.curr_sector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.allocated_sectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.allocated_sectors:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.goal_sector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_sec_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal_pz.header.seq, _x.goal_pz.header.stamp.secs, _x.goal_pz.header.stamp.nsecs))
      _x = self.goal_pz.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal_pz.pose.position.x, _x.goal_pz.pose.position.y, _x.goal_pz.pose.position.z, _x.goal_pz.pose.orientation.x, _x.goal_pz.pose.orientation.y, _x.goal_pz.pose.orientation.z, _x.goal_pz.pose.orientation.w))
      _x = self.goal_pz_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.pz_control, _x.allocated_node.header.seq, _x.allocated_node.header.stamp.secs, _x.allocated_node.header.stamp.nsecs))
      _x = self.allocated_node.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.allocated_node.pose.position.x, _x.allocated_node.pose.position.y, _x.allocated_node.pose.position.z, _x.allocated_node.pose.orientation.x, _x.allocated_node.pose.orientation.y, _x.allocated_node.pose.orientation.z, _x.allocated_node.pose.orientation.w))
      length = len(self.required_segments)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.required_segments))
      length = len(self.allocated_segments)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.allocated_segments))
      _x = self
      buff.write(_get_struct_I8B().pack(_x.curr_pz_seq, _x.moving, _x.removing, _x.docking, _x.parking, _x.planning, _x.passing, _x.inFailure, _x.idle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.goal_pz is None:
        self.goal_pz = geometry_msgs.msg.PoseStamped()
      if self.allocated_node is None:
        self.allocated_node = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_name = str[start:end].decode('utf-8')
      else:
        self.vehicle_name = str[start:end]
      start = end
      end += 4
      (self.priority,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.curr_sector = str[start:end].decode('utf-8')
      else:
        self.curr_sector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.allocated_sectors = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.allocated_sectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_sector = str[start:end].decode('utf-8')
      else:
        self.goal_sector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_sec_state = str[start:end].decode('utf-8')
      else:
        self.goal_sec_state = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal_pz.header.seq, _x.goal_pz.header.stamp.secs, _x.goal_pz.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pz.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pz.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal_pz.pose.position.x, _x.goal_pz.pose.position.y, _x.goal_pz.pose.position.z, _x.goal_pz.pose.orientation.x, _x.goal_pz.pose.orientation.y, _x.goal_pz.pose.orientation.z, _x.goal_pz.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pz_state = str[start:end].decode('utf-8')
      else:
        self.goal_pz_state = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pz_control, _x.allocated_node.header.seq, _x.allocated_node.header.stamp.secs, _x.allocated_node.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.pz_control = bool(self.pz_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.allocated_node.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.allocated_node.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.allocated_node.pose.position.x, _x.allocated_node.pose.position.y, _x.allocated_node.pose.position.z, _x.allocated_node.pose.orientation.x, _x.allocated_node.pose.orientation.y, _x.allocated_node.pose.orientation.z, _x.allocated_node.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.required_segments = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.allocated_segments = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.curr_pz_seq, _x.moving, _x.removing, _x.docking, _x.parking, _x.planning, _x.passing, _x.inFailure, _x.idle,) = _get_struct_I8B().unpack(str[start:end])
      self.moving = bool(self.moving)
      self.removing = bool(self.removing)
      self.docking = bool(self.docking)
      self.parking = bool(self.parking)
      self.planning = bool(self.planning)
      self.passing = bool(self.passing)
      self.inFailure = bool(self.inFailure)
      self.idle = bool(self.idle)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.vehicle_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.priority))
      _x = self.curr_sector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.allocated_sectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.allocated_sectors:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.goal_sector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_sec_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal_pz.header.seq, _x.goal_pz.header.stamp.secs, _x.goal_pz.header.stamp.nsecs))
      _x = self.goal_pz.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal_pz.pose.position.x, _x.goal_pz.pose.position.y, _x.goal_pz.pose.position.z, _x.goal_pz.pose.orientation.x, _x.goal_pz.pose.orientation.y, _x.goal_pz.pose.orientation.z, _x.goal_pz.pose.orientation.w))
      _x = self.goal_pz_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.pz_control, _x.allocated_node.header.seq, _x.allocated_node.header.stamp.secs, _x.allocated_node.header.stamp.nsecs))
      _x = self.allocated_node.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.allocated_node.pose.position.x, _x.allocated_node.pose.position.y, _x.allocated_node.pose.position.z, _x.allocated_node.pose.orientation.x, _x.allocated_node.pose.orientation.y, _x.allocated_node.pose.orientation.z, _x.allocated_node.pose.orientation.w))
      length = len(self.required_segments)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.required_segments.tostring())
      length = len(self.allocated_segments)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.allocated_segments.tostring())
      _x = self
      buff.write(_get_struct_I8B().pack(_x.curr_pz_seq, _x.moving, _x.removing, _x.docking, _x.parking, _x.planning, _x.passing, _x.inFailure, _x.idle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.goal_pz is None:
        self.goal_pz = geometry_msgs.msg.PoseStamped()
      if self.allocated_node is None:
        self.allocated_node = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_name = str[start:end].decode('utf-8')
      else:
        self.vehicle_name = str[start:end]
      start = end
      end += 4
      (self.priority,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.curr_sector = str[start:end].decode('utf-8')
      else:
        self.curr_sector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.allocated_sectors = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.allocated_sectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_sector = str[start:end].decode('utf-8')
      else:
        self.goal_sector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_sec_state = str[start:end].decode('utf-8')
      else:
        self.goal_sec_state = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal_pz.header.seq, _x.goal_pz.header.stamp.secs, _x.goal_pz.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pz.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pz.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal_pz.pose.position.x, _x.goal_pz.pose.position.y, _x.goal_pz.pose.position.z, _x.goal_pz.pose.orientation.x, _x.goal_pz.pose.orientation.y, _x.goal_pz.pose.orientation.z, _x.goal_pz.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pz_state = str[start:end].decode('utf-8')
      else:
        self.goal_pz_state = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pz_control, _x.allocated_node.header.seq, _x.allocated_node.header.stamp.secs, _x.allocated_node.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.pz_control = bool(self.pz_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.allocated_node.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.allocated_node.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.allocated_node.pose.position.x, _x.allocated_node.pose.position.y, _x.allocated_node.pose.position.z, _x.allocated_node.pose.orientation.x, _x.allocated_node.pose.orientation.y, _x.allocated_node.pose.orientation.z, _x.allocated_node.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.required_segments = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.allocated_segments = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.curr_pz_seq, _x.moving, _x.removing, _x.docking, _x.parking, _x.planning, _x.passing, _x.inFailure, _x.idle,) = _get_struct_I8B().unpack(str[start:end])
      self.moving = bool(self.moving)
      self.removing = bool(self.removing)
      self.docking = bool(self.docking)
      self.parking = bool(self.parking)
      self.planning = bool(self.planning)
      self.passing = bool(self.passing)
      self.inFailure = bool(self.inFailure)
      self.idle = bool(self.idle)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_I8B = None
def _get_struct_I8B():
    global _struct_I8B
    if _struct_I8B is None:
        _struct_I8B = struct.Struct("<I8B")
    return _struct_I8B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
