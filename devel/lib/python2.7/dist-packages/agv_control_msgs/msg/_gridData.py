# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_control_msgs/gridData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_control_msgs.msg

class gridData(genpy.Message):
  _md5sum = "75f2fe2eb528ad0443af47611bcbf66b"
  _type = "agv_control_msgs/gridData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """arrayData[] xGrid
arrayData[] yGrid
arrayData[] timeInGrid
arrayData[] timeOutGrid

================================================================================
MSG: agv_control_msgs/arrayData
float32[] data
"""
  __slots__ = ['xGrid','yGrid','timeInGrid','timeOutGrid']
  _slot_types = ['agv_control_msgs/arrayData[]','agv_control_msgs/arrayData[]','agv_control_msgs/arrayData[]','agv_control_msgs/arrayData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       xGrid,yGrid,timeInGrid,timeOutGrid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gridData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.xGrid is None:
        self.xGrid = []
      if self.yGrid is None:
        self.yGrid = []
      if self.timeInGrid is None:
        self.timeInGrid = []
      if self.timeOutGrid is None:
        self.timeOutGrid = []
    else:
      self.xGrid = []
      self.yGrid = []
      self.timeInGrid = []
      self.timeOutGrid = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.xGrid is None:
        self.xGrid = None
      if self.yGrid is None:
        self.yGrid = None
      if self.timeInGrid is None:
        self.timeInGrid = None
      if self.timeOutGrid is None:
        self.timeOutGrid = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.timeOutGrid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.xGrid is None:
        self.xGrid = None
      if self.yGrid is None:
        self.yGrid = None
      if self.timeInGrid is None:
        self.timeInGrid = None
      if self.timeOutGrid is None:
        self.timeOutGrid = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.timeOutGrid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
