# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_control_msgs/GetMyPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_control_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class GetMyPlanRequest(genpy.Message):
  _md5sum = "f307e49f4e9837bf699b86b85fdd6c2f"
  _type = "agv_control_msgs/GetMyPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/PoseStamped start


geometry_msgs/PoseStamped goal

bool removing


geometry_msgs/PoseStamped carobst


gridData forbiddenCells

geometry_msgs/PoseStamped[] vehWithFailures

int32[] wrongX
int32[] wrongY

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: agv_control_msgs/gridData
arrayData[] xGrid
arrayData[] yGrid
arrayData[] timeInGrid
arrayData[] timeOutGrid

================================================================================
MSG: agv_control_msgs/arrayData
float32[] data
"""
  __slots__ = ['start','goal','removing','carobst','forbiddenCells','vehWithFailures','wrongX','wrongY']
  _slot_types = ['geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','bool','geometry_msgs/PoseStamped','agv_control_msgs/gridData','geometry_msgs/PoseStamped[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,goal,removing,carobst,forbiddenCells,vehWithFailures,wrongX,wrongY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMyPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.removing is None:
        self.removing = False
      if self.carobst is None:
        self.carobst = geometry_msgs.msg.PoseStamped()
      if self.forbiddenCells is None:
        self.forbiddenCells = agv_control_msgs.msg.gridData()
      if self.vehWithFailures is None:
        self.vehWithFailures = []
      if self.wrongX is None:
        self.wrongX = []
      if self.wrongY is None:
        self.wrongY = []
    else:
      self.start = geometry_msgs.msg.PoseStamped()
      self.goal = geometry_msgs.msg.PoseStamped()
      self.removing = False
      self.carobst = geometry_msgs.msg.PoseStamped()
      self.forbiddenCells = agv_control_msgs.msg.gridData()
      self.vehWithFailures = []
      self.wrongX = []
      self.wrongY = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.removing, _x.carobst.header.seq, _x.carobst.header.stamp.secs, _x.carobst.header.stamp.nsecs))
      _x = self.carobst.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.carobst.pose.position.x, _x.carobst.pose.position.y, _x.carobst.pose.position.z, _x.carobst.pose.orientation.x, _x.carobst.pose.orientation.y, _x.carobst.pose.orientation.z, _x.carobst.pose.orientation.w))
      length = len(self.forbiddenCells.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.forbiddenCells.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.forbiddenCells.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.forbiddenCells.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.vehWithFailures)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehWithFailures:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.wrongX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.wrongX))
      length = len(self.wrongY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.wrongY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.carobst is None:
        self.carobst = geometry_msgs.msg.PoseStamped()
      if self.forbiddenCells is None:
        self.forbiddenCells = agv_control_msgs.msg.gridData()
      if self.vehWithFailures is None:
        self.vehWithFailures = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.removing, _x.carobst.header.seq, _x.carobst.header.stamp.secs, _x.carobst.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.removing = bool(self.removing)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.carobst.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.carobst.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.carobst.pose.position.x, _x.carobst.pose.position.y, _x.carobst.pose.position.z, _x.carobst.pose.orientation.x, _x.carobst.pose.orientation.y, _x.carobst.pose.orientation.z, _x.carobst.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.forbiddenCells.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.forbiddenCells.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.forbiddenCells.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.forbiddenCells.timeOutGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehWithFailures = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v6 = val1.header
        start = end
        end += 4
        (_v6.seq,) = _get_struct_I().unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8')
        else:
          _v6.frame_id = str[start:end]
        _v8 = val1.pose
        _v9 = _v8.position
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = _v8.orientation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.vehWithFailures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrongX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrongY = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.removing, _x.carobst.header.seq, _x.carobst.header.stamp.secs, _x.carobst.header.stamp.nsecs))
      _x = self.carobst.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.carobst.pose.position.x, _x.carobst.pose.position.y, _x.carobst.pose.position.z, _x.carobst.pose.orientation.x, _x.carobst.pose.orientation.y, _x.carobst.pose.orientation.z, _x.carobst.pose.orientation.w))
      length = len(self.forbiddenCells.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.forbiddenCells.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.forbiddenCells.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.forbiddenCells.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.forbiddenCells.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.vehWithFailures)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehWithFailures:
        _v11 = val1.header
        buff.write(_get_struct_I().pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.pose
        _v14 = _v13.position
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.wrongX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wrongX.tostring())
      length = len(self.wrongY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wrongY.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.carobst is None:
        self.carobst = geometry_msgs.msg.PoseStamped()
      if self.forbiddenCells is None:
        self.forbiddenCells = agv_control_msgs.msg.gridData()
      if self.vehWithFailures is None:
        self.vehWithFailures = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.removing, _x.carobst.header.seq, _x.carobst.header.stamp.secs, _x.carobst.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.removing = bool(self.removing)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.carobst.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.carobst.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.carobst.pose.position.x, _x.carobst.pose.position.y, _x.carobst.pose.position.z, _x.carobst.pose.orientation.x, _x.carobst.pose.orientation.y, _x.carobst.pose.orientation.z, _x.carobst.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.forbiddenCells.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.forbiddenCells.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.forbiddenCells.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.forbiddenCells.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.forbiddenCells.timeOutGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehWithFailures = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8')
        else:
          _v16.frame_id = str[start:end]
        _v18 = val1.pose
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = _v18.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.vehWithFailures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrongX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrongY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7dB3I = None
def _get_struct_7dB3I():
    global _struct_7dB3I
    if _struct_7dB3I is None:
        _struct_7dB3I = struct.Struct("<7dB3I")
    return _struct_7dB3I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agv_control_msgs/GetMyPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agv_control_msgs.msg
import std_msgs.msg

class GetMyPlanResponse(genpy.Message):
  _md5sum = "426dd4c3a22de2c1316078f49825445e"
  _type = "agv_control_msgs/GetMyPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """planData plan


================================================================================
MSG: agv_control_msgs/planData
Header header

float32[] xp
float32[] yp
float32[] fip
float32[] sp

stringArray[] sectors
bool[] pz_control

gridData grid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: agv_control_msgs/stringArray
string[] data

================================================================================
MSG: agv_control_msgs/gridData
arrayData[] xGrid
arrayData[] yGrid
arrayData[] timeInGrid
arrayData[] timeOutGrid

================================================================================
MSG: agv_control_msgs/arrayData
float32[] data
"""
  __slots__ = ['plan']
  _slot_types = ['agv_control_msgs/planData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMyPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.plan is None:
        self.plan = agv_control_msgs.msg.planData()
    else:
      self.plan = agv_control_msgs.msg.planData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.plan.header.seq, _x.plan.header.stamp.secs, _x.plan.header.stamp.nsecs))
      _x = self.plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.plan.xp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.plan.xp))
      length = len(self.plan.yp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.plan.yp))
      length = len(self.plan.fip)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.plan.fip))
      length = len(self.plan.sp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.plan.sp))
      length = len(self.plan.sectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.sectors:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.plan.pz_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.plan.pz_control))
      length = len(self.plan.grid.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.plan.grid.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.plan.grid.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.plan.grid.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.plan is None:
        self.plan = agv_control_msgs.msg.planData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.plan.header.seq, _x.plan.header.stamp.secs, _x.plan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.plan.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.xp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.yp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.fip = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.sp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.sectors = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.stringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.data.append(val2)
        self.plan.sectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.pz_control = struct.unpack(pattern, str[start:end])
      self.plan.pz_control = list(map(bool, self.plan.pz_control))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.plan.grid.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.plan.grid.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.plan.grid.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.plan.grid.timeOutGrid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.plan.header.seq, _x.plan.header.stamp.secs, _x.plan.header.stamp.nsecs))
      _x = self.plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.plan.xp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.plan.xp.tostring())
      length = len(self.plan.yp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.plan.yp.tostring())
      length = len(self.plan.fip)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.plan.fip.tostring())
      length = len(self.plan.sp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.plan.sp.tostring())
      length = len(self.plan.sectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.sectors:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.plan.pz_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.plan.pz_control.tostring())
      length = len(self.plan.grid.xGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.xGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.plan.grid.yGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.yGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.plan.grid.timeInGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.timeInGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.plan.grid.timeOutGrid)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan.grid.timeOutGrid:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.plan is None:
        self.plan = agv_control_msgs.msg.planData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.plan.header.seq, _x.plan.header.stamp.secs, _x.plan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.plan.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.xp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.yp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.fip = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.sp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.sectors = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.stringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.data.append(val2)
        self.plan.sectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.plan.pz_control = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.plan.pz_control = list(map(bool, self.plan.pz_control))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.xGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plan.grid.xGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.yGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plan.grid.yGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.timeInGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plan.grid.timeInGrid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan.grid.timeOutGrid = []
      for i in range(0, length):
        val1 = agv_control_msgs.msg.arrayData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plan.grid.timeOutGrid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
class GetMyPlan(object):
  _type          = 'agv_control_msgs/GetMyPlan'
  _md5sum = 'fafb7a48c36f2c02adeb6df2d676b49e'
  _request_class  = GetMyPlanRequest
  _response_class = GetMyPlanResponse
